#!/usr/bin/env python3

import errno
import os
import pathlib
from shutil import which
import subprocess

cwd = pathlib.Path().absolute()
output_dir = os.path.join(cwd, "output")
pdftoolkit = "pdftk"

letterhead = os.path.join(os.path.dirname(__file__), "letterhead.pdf")


def check_tools():
    if which(pdftoolkit) is None:
        print("ERROR: The tool {tool} isn't available".format(tool=pdftoolkit))
        install_command = "`apt-get install {pkg}`".format(pkg=pdftoolkit)
        print(
            "To install it, you probably need to run {cmd}".format(cmd=install_command)
        )
        exit(1)
    if not os.path.isfile(letterhead):
        print(
            "ERROR: Letterhead not found at {letterhead}".format(letterhead=letterhead)
        )
        exit(1)


def get_list_pdfs(folder):
    files = [
        f
        for f in os.listdir(folder)
        if f.lower().endswith(".pdf") and os.path.isfile(os.path.join(folder, f))
    ]
    return files


def create_dir(folder):
    try:
        os.makedirs(folder)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise


def apply_letterhead(pdf_file, dst_folder):
    filename = os.path.basename(pdf_file)
    name, ext = os.path.splitext(filename)
    new_name = "{name}-letterhead{ext}".format(name=name, ext=ext)
    dst_file = os.path.join(dst_folder, new_name)

    if os.path.isfile(dst_file):
        return

    print("Processsing file {filename}".format(filename=filename))
    pdftk_cmd = [pdftoolkit, pdf_file, "background", letterhead, "output", dst_file]
    subprocess.check_call(
        pdftk_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL
    )


check_tools()
list_pdfs = get_list_pdfs(cwd)

if not list_pdfs:
    print("No PDF files found in the current directory")
    exit(0)

create_dir(output_dir)
for pdf_file in list_pdfs:
    apply_letterhead(os.path.join(cwd, pdf_file), output_dir)
